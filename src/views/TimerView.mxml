<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Timer" 
		add="onAdd(event)"
		viewDeactivate="onViewDeactivate(event)">
	
	<s:states>
		<s:State name="default"/>
		<s:State name="started"/>
		<s:State name="stopped"/>
		<s:State name="finished"/>
	</s:states>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.Timer;
			import model.TimeAmount;
			import mx.events.FlexEvent;
			import spark.events.ViewNavigatorEvent;
			
			[Embed(source="assets/beep-6.mp3")]
			private var beepSound:Class;
			
			private var amount:TimeAmount;
			private var timer:Timer;
			
			/* Setup */
			protected function onAdd(event:FlexEvent):void
			{
				if ( this.navigator.poppedViewReturnedObject ) {
					amount = this.navigator.poppedViewReturnedObject.object as TimeAmount;
				} else {
					amount = new model.TimeAmount(0,0,5);
				}
				displayTime();
				timer = new Timer(1000,amount.totalseconds);
				timer.addEventListener(TimerEvent.TIMER, onTick);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
			}
			
			/* Tear-down */
			protected function onViewDeactivate(event:ViewNavigatorEvent):void
			{
				/* Do some memory management */
				timer.stop();
				timer.removeEventListener(TimerEvent.TIMER, onTick);
				timer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
				timer = null;
				amount = null;
			}
			
			protected function onTick(event:TimerEvent=null):void 
			{
				amount.decrement();
				displayTime();
			}
			protected function onTimerComplete(event:TimerEvent=null):void
			{
				currentState='finished';
				var snd:Sound = new beepSound() as Sound;
				snd.play(0,4);
			}
			
			protected function displayTime():void
			{
				timerLabel.text = amount.FormattedTime;
			}
			
			protected function startTimer():void 
			{
				currentState='started';
				timer.start();
			}
			
			protected function reStartTimer():void 
			{
				currentState='started';
				timer.start();
			}
			
			protected function stopTimer():void 
			{
				currentState='stopped';
				timer.stop();
			}
			
			protected function resetTimer():void 
			{
				currentState='default';
				timer.reset();
				amount.reset();
				displayTime();
			}
			
		]]>
	</fx:Script>
	
	<s:actionContent>
		<s:Button label="Edit" click="this.navigator.pushView(views.EditTimerView,amount);" />
	</s:actionContent>
	
	<s:Label id="timerLabel" horizontalCenter="0" verticalCenter="-40" text="00:00:00" styleName="timeDisplay" />
	
	<s:VGroup horizontalCenter="0" verticalCenter="20" verticalCenter.stopped="46">
		<s:Button x="124" y="178" width="120" height="45"
				  label="START"
				  click.default="startTimer()" 
				  click.started="stopTimer()" 
				  click.stopped="reStartTimer()"
				  label.started="STOP"
				  label.stopped="RESUME"
				  excludeFrom="finished"/>
		<s:Button includeIn="stopped,finished" x="124" y="256" width="120" height="45" label="RESET"
				  click="resetTimer()"/>
	</s:VGroup>
	
</s:View>
